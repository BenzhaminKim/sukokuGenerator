Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getBufferPositionFromMouseEvent = getBufferPositionFromMouseEvent;
exports.mouseEventNearPosition = mouseEventNearPosition;
exports.hasParent = hasParent;

var TOOLTIP_WIDTH_HIDE_OFFSET = 30;

function getBufferPositionFromMouseEvent(event, editor, editorElement) {
  var pixelPosition = editorElement.component.pixelPositionForMouseEvent(event);
  var screenPosition = editorElement.component.screenPositionForPixelPosition(pixelPosition);
  if (Number.isNaN(screenPosition.row) || Number.isNaN(screenPosition.column)) return null;
  // ^ Workaround for NaN bug steelbrain/linter-ui-default#191
  var expectedPixelPosition = editorElement.pixelPositionForScreenPosition(screenPosition);
  var differenceTop = pixelPosition.top - expectedPixelPosition.top;
  var differenceLeft = pixelPosition.left - expectedPixelPosition.left;
  // Only allow offset of 20px - Fixes steelbrain/linter-ui-default#63
  if ((differenceTop === 0 || differenceTop > 0 && differenceTop < 20 || differenceTop < 0 && differenceTop > -20) && (differenceLeft === 0 || differenceLeft > 0 && differenceLeft < 20 || differenceLeft < 0 && differenceLeft > -20)) {
    return editor.bufferPositionForScreenPosition(screenPosition);
  }
  return null;
}

function mouseEventNearPosition(_ref) {
  var event = _ref.event;
  var editor = _ref.editor;
  var editorElement = _ref.editorElement;
  var tooltipElement = _ref.tooltipElement;
  var screenPosition = _ref.screenPosition;

  var pixelPosition = editorElement.component.pixelPositionForMouseEvent(event);
  var expectedPixelPosition = editorElement.pixelPositionForScreenPosition(screenPosition);
  var differenceTop = pixelPosition.top - expectedPixelPosition.top;
  var differenceLeft = pixelPosition.left - expectedPixelPosition.left;

  var editorLineHeight = editor.lineHeightInPixels;
  var elementHeight = tooltipElement.offsetHeight + editorLineHeight;
  var elementWidth = tooltipElement.offsetWidth;

  if (differenceTop > 0) {
    // Cursor is below the line
    if (differenceTop > elementHeight + 1.5 * editorLineHeight) {
      return false;
    }
  } else if (differenceTop < 0) {
    // Cursor is above the line
    if (differenceTop < -1.5 * editorLineHeight) {
      return false;
    }
  }
  if (differenceLeft > 0) {
    // Right of the start of highlight
    if (differenceLeft > elementWidth + TOOLTIP_WIDTH_HIDE_OFFSET) {
      return false;
    }
  } else if (differenceLeft < 0) {
    // Left of start of highlight
    if (differenceLeft < -1 * TOOLTIP_WIDTH_HIDE_OFFSET) {
      return false;
    }
  }
  return true;
}

function hasParent(givenElement, selector) {
  var element = givenElement;
  do {
    if (element.matches(selector)) {
      return true;
    }
    element = element.parentElement;
  } while (element && element.nodeName !== 'HTML');
  return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vQzovVXNlcnMvdXNlci8uYXRvbS9wYWNrYWdlcy9saW50ZXItdWktZGVmYXVsdC9saWIvZWRpdG9yL2hlbHBlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUlBLElBQU0seUJBQXlCLEdBQUcsRUFBRSxDQUFBOztBQUU3QixTQUFTLCtCQUErQixDQUFDLEtBQWlCLEVBQUUsTUFBa0IsRUFBRSxhQUFxQixFQUFVO0FBQ3BILE1BQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsMEJBQTBCLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDL0UsTUFBTSxjQUFjLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQyw4QkFBOEIsQ0FBQyxhQUFhLENBQUMsQ0FBQTtBQUM1RixNQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE9BQU8sSUFBSSxDQUFBOztBQUV4RixNQUFNLHFCQUFxQixHQUFHLGFBQWEsQ0FBQyw4QkFBOEIsQ0FBQyxjQUFjLENBQUMsQ0FBQTtBQUMxRixNQUFNLGFBQWEsR0FBRyxhQUFhLENBQUMsR0FBRyxHQUFHLHFCQUFxQixDQUFDLEdBQUcsQ0FBQTtBQUNuRSxNQUFNLGNBQWMsR0FBRyxhQUFhLENBQUMsSUFBSSxHQUFHLHFCQUFxQixDQUFDLElBQUksQ0FBQTs7QUFFdEUsTUFDRSxDQUFDLGFBQWEsS0FBSyxDQUFDLElBQUssYUFBYSxHQUFHLENBQUMsSUFBSSxhQUFhLEdBQUcsRUFBRSxBQUFDLElBQUssYUFBYSxHQUFHLENBQUMsSUFBSSxhQUFhLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FDOUcsY0FBYyxLQUFLLENBQUMsSUFBSyxjQUFjLEdBQUcsQ0FBQyxJQUFJLGNBQWMsR0FBRyxFQUFFLEFBQUMsSUFBSyxjQUFjLEdBQUcsQ0FBQyxJQUFJLGNBQWMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxBQUFDLEVBQ3JIO0FBQ0EsV0FBTyxNQUFNLENBQUMsK0JBQStCLENBQUMsY0FBYyxDQUFDLENBQUE7R0FDOUQ7QUFDRCxTQUFPLElBQUksQ0FBQTtDQUNaOztBQUVNLFNBQVMsc0JBQXNCLENBQUMsSUFBd0UsRUFBVztNQUFqRixLQUFLLEdBQVAsSUFBd0UsQ0FBdEUsS0FBSztNQUFFLE1BQU0sR0FBZixJQUF3RSxDQUEvRCxNQUFNO01BQUUsYUFBYSxHQUE5QixJQUF3RSxDQUF2RCxhQUFhO01BQUUsY0FBYyxHQUE5QyxJQUF3RSxDQUF4QyxjQUFjO01BQUUsY0FBYyxHQUE5RCxJQUF3RSxDQUF4QixjQUFjOztBQUNuRyxNQUFNLGFBQWEsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQy9FLE1BQU0scUJBQXFCLEdBQUcsYUFBYSxDQUFDLDhCQUE4QixDQUFDLGNBQWMsQ0FBQyxDQUFBO0FBQzFGLE1BQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQyxHQUFHLEdBQUcscUJBQXFCLENBQUMsR0FBRyxDQUFBO0FBQ25FLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQyxJQUFJLEdBQUcscUJBQXFCLENBQUMsSUFBSSxDQUFBOztBQUV0RSxNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQTtBQUNsRCxNQUFNLGFBQWEsR0FBRyxjQUFjLENBQUMsWUFBWSxHQUFHLGdCQUFnQixDQUFBO0FBQ3BFLE1BQU0sWUFBWSxHQUFHLGNBQWMsQ0FBQyxXQUFXLENBQUE7O0FBRS9DLE1BQUksYUFBYSxHQUFHLENBQUMsRUFBRTs7QUFFckIsUUFBSSxhQUFhLEdBQUcsYUFBYSxHQUFHLEdBQUcsR0FBRyxnQkFBZ0IsRUFBRTtBQUMxRCxhQUFPLEtBQUssQ0FBQTtLQUNiO0dBQ0YsTUFBTSxJQUFJLGFBQWEsR0FBRyxDQUFDLEVBQUU7O0FBRTVCLFFBQUksYUFBYSxHQUFHLENBQUMsR0FBRyxHQUFHLGdCQUFnQixFQUFFO0FBQzNDLGFBQU8sS0FBSyxDQUFBO0tBQ2I7R0FDRjtBQUNELE1BQUksY0FBYyxHQUFHLENBQUMsRUFBRTs7QUFFdEIsUUFBSSxjQUFjLEdBQUcsWUFBWSxHQUFHLHlCQUF5QixFQUFFO0FBQzdELGFBQU8sS0FBSyxDQUFBO0tBQ2I7R0FDRixNQUFNLElBQUksY0FBYyxHQUFHLENBQUMsRUFBRTs7QUFFN0IsUUFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFDLEdBQUcseUJBQXlCLEVBQUU7QUFDbkQsYUFBTyxLQUFLLENBQUE7S0FDYjtHQUNGO0FBQ0QsU0FBTyxJQUFJLENBQUE7Q0FDWjs7QUFFTSxTQUFTLFNBQVMsQ0FBQyxZQUF5QixFQUFFLFFBQWdCLEVBQVc7QUFDOUUsTUFBSSxPQUFPLEdBQUcsWUFBWSxDQUFBO0FBQzFCLEtBQUc7QUFDRCxRQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDN0IsYUFBTyxJQUFJLENBQUE7S0FDWjtBQUNELFdBQU8sR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFBO0dBQ2hDLFFBQVEsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssTUFBTSxFQUFDO0FBQ2hELFNBQU8sS0FBSyxDQUFBO0NBQ2IiLCJmaWxlIjoiZmlsZTovLy9DOi9Vc2Vycy91c2VyLy5hdG9tL3BhY2thZ2VzL2xpbnRlci11aS1kZWZhdWx0L2xpYi9lZGl0b3IvaGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbmltcG9ydCB0eXBlIHsgUG9pbnQsIFRleHRFZGl0b3IgfSBmcm9tICdhdG9tJ1xuXG5jb25zdCBUT09MVElQX1dJRFRIX0hJREVfT0ZGU0VUID0gMzBcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1ZmZlclBvc2l0aW9uRnJvbU1vdXNlRXZlbnQoZXZlbnQ6IE1vdXNlRXZlbnQsIGVkaXRvcjogVGV4dEVkaXRvciwgZWRpdG9yRWxlbWVudDogT2JqZWN0KTogP1BvaW50IHtcbiAgY29uc3QgcGl4ZWxQb3NpdGlvbiA9IGVkaXRvckVsZW1lbnQuY29tcG9uZW50LnBpeGVsUG9zaXRpb25Gb3JNb3VzZUV2ZW50KGV2ZW50KVxuICBjb25zdCBzY3JlZW5Qb3NpdGlvbiA9IGVkaXRvckVsZW1lbnQuY29tcG9uZW50LnNjcmVlblBvc2l0aW9uRm9yUGl4ZWxQb3NpdGlvbihwaXhlbFBvc2l0aW9uKVxuICBpZiAoTnVtYmVyLmlzTmFOKHNjcmVlblBvc2l0aW9uLnJvdykgfHwgTnVtYmVyLmlzTmFOKHNjcmVlblBvc2l0aW9uLmNvbHVtbikpIHJldHVybiBudWxsXG4gIC8vIF4gV29ya2Fyb3VuZCBmb3IgTmFOIGJ1ZyBzdGVlbGJyYWluL2xpbnRlci11aS1kZWZhdWx0IzE5MVxuICBjb25zdCBleHBlY3RlZFBpeGVsUG9zaXRpb24gPSBlZGl0b3JFbGVtZW50LnBpeGVsUG9zaXRpb25Gb3JTY3JlZW5Qb3NpdGlvbihzY3JlZW5Qb3NpdGlvbilcbiAgY29uc3QgZGlmZmVyZW5jZVRvcCA9IHBpeGVsUG9zaXRpb24udG9wIC0gZXhwZWN0ZWRQaXhlbFBvc2l0aW9uLnRvcFxuICBjb25zdCBkaWZmZXJlbmNlTGVmdCA9IHBpeGVsUG9zaXRpb24ubGVmdCAtIGV4cGVjdGVkUGl4ZWxQb3NpdGlvbi5sZWZ0XG4gIC8vIE9ubHkgYWxsb3cgb2Zmc2V0IG9mIDIwcHggLSBGaXhlcyBzdGVlbGJyYWluL2xpbnRlci11aS1kZWZhdWx0IzYzXG4gIGlmIChcbiAgICAoZGlmZmVyZW5jZVRvcCA9PT0gMCB8fCAoZGlmZmVyZW5jZVRvcCA+IDAgJiYgZGlmZmVyZW5jZVRvcCA8IDIwKSB8fCAoZGlmZmVyZW5jZVRvcCA8IDAgJiYgZGlmZmVyZW5jZVRvcCA+IC0yMCkpICYmXG4gICAgKGRpZmZlcmVuY2VMZWZ0ID09PSAwIHx8IChkaWZmZXJlbmNlTGVmdCA+IDAgJiYgZGlmZmVyZW5jZUxlZnQgPCAyMCkgfHwgKGRpZmZlcmVuY2VMZWZ0IDwgMCAmJiBkaWZmZXJlbmNlTGVmdCA+IC0yMCkpXG4gICkge1xuICAgIHJldHVybiBlZGl0b3IuYnVmZmVyUG9zaXRpb25Gb3JTY3JlZW5Qb3NpdGlvbihzY3JlZW5Qb3NpdGlvbilcbiAgfVxuICByZXR1cm4gbnVsbFxufVxuXG5leHBvcnQgZnVuY3Rpb24gbW91c2VFdmVudE5lYXJQb3NpdGlvbih7IGV2ZW50LCBlZGl0b3IsIGVkaXRvckVsZW1lbnQsIHRvb2x0aXBFbGVtZW50LCBzY3JlZW5Qb3NpdGlvbiB9OiBPYmplY3QpOiBib29sZWFuIHtcbiAgY29uc3QgcGl4ZWxQb3NpdGlvbiA9IGVkaXRvckVsZW1lbnQuY29tcG9uZW50LnBpeGVsUG9zaXRpb25Gb3JNb3VzZUV2ZW50KGV2ZW50KVxuICBjb25zdCBleHBlY3RlZFBpeGVsUG9zaXRpb24gPSBlZGl0b3JFbGVtZW50LnBpeGVsUG9zaXRpb25Gb3JTY3JlZW5Qb3NpdGlvbihzY3JlZW5Qb3NpdGlvbilcbiAgY29uc3QgZGlmZmVyZW5jZVRvcCA9IHBpeGVsUG9zaXRpb24udG9wIC0gZXhwZWN0ZWRQaXhlbFBvc2l0aW9uLnRvcFxuICBjb25zdCBkaWZmZXJlbmNlTGVmdCA9IHBpeGVsUG9zaXRpb24ubGVmdCAtIGV4cGVjdGVkUGl4ZWxQb3NpdGlvbi5sZWZ0XG5cbiAgY29uc3QgZWRpdG9yTGluZUhlaWdodCA9IGVkaXRvci5saW5lSGVpZ2h0SW5QaXhlbHNcbiAgY29uc3QgZWxlbWVudEhlaWdodCA9IHRvb2x0aXBFbGVtZW50Lm9mZnNldEhlaWdodCArIGVkaXRvckxpbmVIZWlnaHRcbiAgY29uc3QgZWxlbWVudFdpZHRoID0gdG9vbHRpcEVsZW1lbnQub2Zmc2V0V2lkdGhcblxuICBpZiAoZGlmZmVyZW5jZVRvcCA+IDApIHtcbiAgICAvLyBDdXJzb3IgaXMgYmVsb3cgdGhlIGxpbmVcbiAgICBpZiAoZGlmZmVyZW5jZVRvcCA+IGVsZW1lbnRIZWlnaHQgKyAxLjUgKiBlZGl0b3JMaW5lSGVpZ2h0KSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGlmZmVyZW5jZVRvcCA8IDApIHtcbiAgICAvLyBDdXJzb3IgaXMgYWJvdmUgdGhlIGxpbmVcbiAgICBpZiAoZGlmZmVyZW5jZVRvcCA8IC0xLjUgKiBlZGl0b3JMaW5lSGVpZ2h0KSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgaWYgKGRpZmZlcmVuY2VMZWZ0ID4gMCkge1xuICAgIC8vIFJpZ2h0IG9mIHRoZSBzdGFydCBvZiBoaWdobGlnaHRcbiAgICBpZiAoZGlmZmVyZW5jZUxlZnQgPiBlbGVtZW50V2lkdGggKyBUT09MVElQX1dJRFRIX0hJREVfT0ZGU0VUKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGlmZmVyZW5jZUxlZnQgPCAwKSB7XG4gICAgLy8gTGVmdCBvZiBzdGFydCBvZiBoaWdobGlnaHRcbiAgICBpZiAoZGlmZmVyZW5jZUxlZnQgPCAtMSAqIFRPT0xUSVBfV0lEVEhfSElERV9PRkZTRVQpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzUGFyZW50KGdpdmVuRWxlbWVudDogSFRNTEVsZW1lbnQsIHNlbGVjdG9yOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgbGV0IGVsZW1lbnQgPSBnaXZlbkVsZW1lbnRcbiAgZG8ge1xuICAgIGlmIChlbGVtZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50XG4gIH0gd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlTmFtZSAhPT0gJ0hUTUwnKVxuICByZXR1cm4gZmFsc2Vcbn1cbiJdfQ==